1,2교시 - java (extends, abstract)

3교시 - 애플리케이션 테스트 수행

[알파테스트] 개발자 앞에서
[베타테스트] 개발자 x 사용자

[결함심각도]

[결함 관련 용어]

[소프트웨어 격언]
테스트 격언

4교시 - 애플리케이션 배포

[테스트 시나리오] 테스트 케이스 묶음
	테스트 케이스들을 적용하는 구체적인 절차를 명세화한 문서
[테스트 드라이버] 테스트 대상의 하위 모듈을 호출하고 파라미터(매개변수)를 전달하고
	모듈 테스트 수행 후의 결과를 도출하는 도구
[테스트 스텁] 제어 모듈이 호출하는 타 모듈의 기능을 단순히 수행하는 도구
	일시적으로 필요한 조건만을 가지고 있는 테스트용 모듈
=========
[소스 코드 최적화] Bad Code를 배제하고 Clean Code로 작성하는 것
   (나쁜코드 Bad Code)  프로그램의 로직이 복잡하고 이해하기 어려운 코드
         스파게티 코드 : 로직이 서로 복잡하게 얽혀 있는 코드
         외계인 코드 Alien Code : 아주 오래되거나 참고문서 또는 개발자가
            없어 유지보수 작업이 어려운 코드
   (클린 코드 Clean Code)  누구나 쉽게 이해하고 수정 및 추가 할 수 있는
         단순, 명료한 코드,  잘 작성된 코드
      가독성 : 누구든지 코드를 쉽게 읽을 수 있도록 작성
         코드 작성 시 이해하기 쉬운 용어를 사용하거나 
         들여쓰기 기능 등을 사용
      단순성 : 코드를 간단하게 작성
         한 번에 한 가지를 처리하도록 코드를 작성하고, 
         클래스/메소드/함수 등을 최소 단위로 분리
      의존성 배제 : 코드가 다른 모듈에 미치는 영향을 최소화
         코드 변경 시 다른 부분에 영향이 없도록 작성
      중복성 최소화 : 코드의 중복을 최소화
         중복 코드는 삭제하고 공통된 코드를 사용
      추상화 : 상위 클래스/메소드/함수에서는 간략하게 애플리케이션의 특성을 나타내고
         상세 내용은 하위 클래스/메소도/함수에서 구현
[소스 코드 최적화 유형]
   클래스 분할 배치 : 하나의 클래스는 하나의 역할만 수행하도록 응집도는 높이고, 크기는 작게 작성
   느슨한 결합 : 인터페이스 클래스를 이용하여 추상화된 자료 구조와 메소드를 구현함으로써
      클래스 간의 의존성을 최소화 
   코드 형식 준수  : 줄바꿈 사용, 개념적 유사성이 높은 종속 함수 사용
      호출하는 함수는 선배치, 호출되는 함수는 후 배치, 지역 변소는 각 함수의 맨 처음에 선언
   좋은 이름 사용 : 변수나 함수 등의 이름은 기억하기 좋은 이름, 발음이 쉬운 용어, 접두어 사용 등 기본적인
      이름 명명 규칙을 정의하고 규칙에 맞는 이름을 사용
   적절한 주석문 사용

5교시 - 화면 구현